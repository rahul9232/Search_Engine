b'\n          \n            There is a RxC grid where the rows are numbered by integers from 1 to R from top to bottom and columns are numbered by integers from 1 to C from left to right. Two cells of the grid are called adjacent if they share a common side.\n\nChef uses an algorithm which starts at a cell (sr,sc) of the grid and visits the unvisited adjacent cells inside the grid recursively. The order in which the adjacent cells are looked for are: right, down, left and up. Your job is to find out the number of different cells that would be visited when the cell (tr,tc) is found. Given below is the pseudocode of the algorithm:\n\n\n// A 2D boolean array to mark the visited cells\nLet seen[1...R][1...C] be a 2D array initialized to false\n\n// The visit counter to count the number of visited cells so far\nvisitcount = 0 \n\n// This function visits the unvisited cells of the grid recursively\n// R,C are the number of rows and columns of the grid\n// r,c are the row and column number of the current cell \n// tr,tc are the row and column number of the target cell \nVISIT(R, C, r, c, tr, tc)\n     // Increment the counter for number of visited cells\n     visitcount = visitcount + 1 \n  \n     // Marks the cell at r,c as visited\n     seen[r][c]=true           \n  \n     // Prints the value of visitcount when the cell(tr,tc) is found\n     if r==tr and c==tc  \n\t    PRINT visitcount\n\n     // Check for an unvisited cell inside grid at right\n     if c+1 \xe2\x89\xa4 C and seen[r][c+1] == false \n\t    VISIT(R,C,r,c+1,tr,tc)\n    \n     // Check for an unvisited cell inside grid at down\n     if r+1 \xe2\x89\xa4 R and seen[r+1][c] == false \n\t     VISIT(R,C,r+1,c,tr,tc)\n  \n     // Check for an unvisited cell inside grid at left\n     if c-1 \xe2\x89\xa5 1 and seen[r][c-1] == false \n\t     VISIT(R,C,r,c-1,tr,tc)\n  \n     // Check for an unvisited cell inside grid at up\n     if r-1 \xe2\x89\xa5 1 and seen[r-1][c] == false \n\t     VISIT(R,C,r-1,c,tr,tc)\n\n\n\n The above algorithm is both time and memory inefficient. Your task is to produce the same output but more efficiently. That is to print the value of visitcount when the cell (tr,tc) is found, if the above algorithm is called with VISIT(R,C,sr,sc,tr,tc). \nInput\nThe first line of the input contains an integer T denoting the number of test cases. Each of the following T lines contain six separated integers R, C, sr, sc, tr and tc.\nOutput\n\xc2\xa0For each case output the number that would be produced by the algorithm given.\nConstraints\n\n1 \xe2\x89\xa4 T \xe2\x89\xa4 200000 (2*105 )\n1 \xe2\x89\xa4 R,C \xe2\x89\xa4 1000000000 (109 )\n1 \xe2\x89\xa4 sr,tr \xe2\x89\xa4 R\n1 \xe2\x89\xa4 sc,tc \xe2\x89\xa4 C\n\n\xc2\xa0\nExample\nInput:\n5\n4 4 3 2 3 4\n4 4 3 2 4 4\n4 4 3 2 2 3\n2 3 1 1 1 3  \n2 3 1 1 1 1 \n\nOutput:\n3\n4\n11\n3\n1\n\n\xc2\xa0\n\n\n\nAuthor:\nimran_adm\n\n\nTester:\n5\xe2\x98\x85rubanenko\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/DFSGRID\n\n\nTags:\n\n               \n                 ad-hoc, cook37, implementation, imran_adm, medium-hard\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n3176\n\n\nDate Added:\n2-08-2013\n\n\nTime Limit:\n3 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, BASH, JS, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'