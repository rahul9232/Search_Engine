b'\nRead problem statements in Hindi, Bengali, Mandarin Chinese, Russian, and Vietnamese as well.\nYou are given a prime pp and a matrix MM with NN rows (numbered 11 through NN) and NN columns (numbered 11 through NN). For each row rr and column cc, the cell in row rr and column cc can either be empty or contain an integer Mr,cMr,c. Initially, all cells are empty.\nNow you should process QQ queries. In each query, you are given integers xx, yy and vv and you should do the following:\n\nIf the cell (x,y)(x,y) is empty before this query, put the value vv in it, i.e. set Mx,yMx,y to vv.\nOtherwise, i.e. if the cell (x,y)(x,y) is not empty, make this cell empty again. It is guaranteed that in such a case, Mx,y=vMx,y=v before this query; vv is provided for convenience.\nAfterwards, Chef wants you to find the number of ways to fill all empty cells with (not necessarily the same) integers in such a way that the resulting matrix is curious. Since this number may be large, compute it modulo 109+7109+7.\n\nIn particular, when there are no empty cells in the matrix, the answer is 11 if the matrix is curious or 00 if it is not curious.\nIn a curious matrix:\n\nEach cell contains an integer between 11 and p\xe2\x88\x921p\xe2\x88\x921 inclusive.\nFor each non-trivial square submatrix AA of MM (a submatrix containing more than one cell), its determinant |A||A| is a multiple of pp.\n\nFor example, consider the following matrix.\nA=\xe2\x8e\xa1\xe2\x8e\xa3\xe2\x8e\xa2122244122\xe2\x8e\xa4\xe2\x8e\xa6\xe2\x8e\xa5A=[121242242]\nThis matrix is curious. For the prime p=5p=5, each of the elements of the matrix is in the range [1,p\xe2\x88\x921][1,p\xe2\x88\x921]. Also, the determinant of each non-trivial square submatrix (there are five of them) is a multiple of the given prime \xe2\x80\x95 for example, the determinant of the whole matrix is 00.\nB=[3114]B=[3114]\nThe above matrix is not a curious matrix for p=5p=5, since the determinant of the only non-trivial square submatrix (which is the whole matrix) is 1111, not a multiple of pp.\nInput\n\nThe first line of the input contains three space-separated integers NN, QQ and pp.\nQQ lines follow. Each of these lines contains three space-separated integers xx, yy and vv describing a query.\n\nOutput\nAfter performing each query, print a single line containing one integer \xe2\x80\x95 the number of ways to form a curious matrix, modulo 109+7109+7.\nConstraints\n\n2\xe2\x89\xa4N\xe2\x89\xa41052\xe2\x89\xa4N\xe2\x89\xa4105\n1\xe2\x89\xa4Q\xe2\x89\xa41051\xe2\x89\xa4Q\xe2\x89\xa4105\n2\xe2\x89\xa4p\xe2\x89\xa4998,244,3532\xe2\x89\xa4p\xe2\x89\xa4998,244,353\npp is a prime number\n1\xe2\x89\xa4x,y\xe2\x89\xa4N1\xe2\x89\xa4x,y\xe2\x89\xa4N\n1\xe2\x89\xa4v\xe2\x89\xa4p\xe2\x88\x9211\xe2\x89\xa4v\xe2\x89\xa4p\xe2\x88\x921\n\nSubtasks\nSubtask #1 (20 points): 1\xe2\x89\xa4N,Q\xe2\x89\xa43001\xe2\x89\xa4N,Q\xe2\x89\xa4300\nSubtask #2 (20 points): no two queries affect the same cell, i.e. the pairs (x,y)(x,y) for all queries are pairwise distinct\nSubtask #3 (20 points): after each query, there is at least one way to construct a curious matrix\nSubtask #4 (40 points): original constraints\n\n                        Sample Input 1\n                        \n\n\n\n\n\n2 6 5\n1 1 3\n1 2 1\n2 1 1\n2 2 4\n1 2 1\n2 2 4\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n16\n4\n1\n0\n1\n4\n\n\nExplanation\nThe only non-trivial square submatrix here is the whole matrix.\nIn the 44-th query, the matrix is completely filled, but it is not curious for p=5p=5, so the answer is 00.\nAfter the 55-th query, there are 33 filled cells: (1,1)\xe2\x86\x923(1,1)\xe2\x86\x923, (2,1)\xe2\x86\x921(2,1)\xe2\x86\x921 and (2,2)\xe2\x86\x924(2,2)\xe2\x86\x924. The cell (1,2)(1,2) is empty and if we want the determinant of the matrix to be divisible by p=5p=5, we have to put 22 in this cell. Then the determinant is 3\xe2\x8b\x854\xe2\x88\x921\xe2\x8b\x852=103\xe2\x8b\x854\xe2\x88\x921\xe2\x8b\x852=10.\n\n\n\nAuthor:\n5\xe2\x98\x85shaanknight\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/CURMAT\n\n\nTags:\n\n               \n                 ad-hoc, disjoint-set-union, hard, jan21, linear-algebra, segment-tree, shaanknight\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n3028\n\n\nDate Added:\n12-10-2020\n\n\nTime Limit:\n1 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nCPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'