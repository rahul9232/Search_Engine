b'\n Read problems statements in Mandarin Chinese  and Russian.\nLira is now very keen on compiler development. :) \nShe knows that one of the most important components of a compiler, is its parser.\nA parser is, in simple terms, a software component that processes text, and checks it\'s semantic correctness, or, if you prefer, if the text is properly built.\nAs an example, in declaring and initializing an integer, in C/C++, you can\'t do something like:\n int = x ;4\nas the semantics of such statement is incorrect, as we all know that the datatype must precede an identifier and only afterwards should come the equal sign and the initialization value, so, the corrected statement should be:\n int x = 4;\nToday, Lira is concerned with an abstract instruction which is composed of the characters "<" and ">" , which she will use on the design of her language, L++ :D.\nShe is using it as an abstraction for generating XML code Tags in an easier fashion and she understood that, for an expression to be valid, a "<" symbol must always have a corresponding ">" character somewhere (not necessary immediately) after it. Moreover, each ">" symbol should correspond to exactly one "<" symbol.\nSo, for instance, the instructions:\n  <<>> \n <> \n <><> \nare all valid. While:\n >> \n ><>< \nare not.\nGiven some expressions which represent some instructions to be analyzed by Lira\'s compiler, you should tell the length of the longest prefix of each of these expressions that is valid, or 0 if there\'s no such a prefix.\nInput\nInput will consist of an integer T denoting the number of test cases to follow.\nThen, T strings follow, each on a single line, representing a possible expression in L++.\nOutput\nFor each expression you should output the length of the longest prefix that is valid or 0 if there\'s no such a prefix. \n\n\nConstraints\n1 \xe2\x89\xa4 T \xe2\x89\xa4 500\n1 \xe2\x89\xa4 The length of a single expression \xe2\x89\xa4 106\nThe total size all the input expressions is no more than 5*106\n\xc2\xa0\n\n                        Sample Input 1\n                        \n\n\n\n\n\n3\n<<>>\n><\n<>>>\n\n\n\n                        Sample Output 1\n                        \n\n\n\n\n\n4\n0\n2\n\n\n\n\n\nAuthor:\nbruno_adm\n\n\nTester:\n6\xe2\x98\x85xcwgf666\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/COMPILER\n\n\nTags:\n\n               \n                 Stacks, ad-hoc\n                 \n                     \n                     Data Structures, Algorithms, Constructive\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\n1588\n\n\nDate Added:\n21-01-2014\n\n\nTime Limit:\n1 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nCPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, PERL, SCALA, LUA, BASH, JS, LISP sbcl, PAS gpc, BF, CLOJ, D, CAML, FORT, ASM, FS, WSPC, LISP clisp, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'