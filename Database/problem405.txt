b'\n\xe2\x80\x9cDo you understand what\xe2\x80\x99s going on in here, TARS?\xe2\x80\x9d\nThe way out of the tesseract is a lower dimensional puzzle which consists of kk-Squares, consisting of a k\xe2\x88\x97k\xe2\x88\x971k\xe2\x88\x97k\xe2\x88\x971 grid of cubies, where the solved configuration consists of six monochromatic faces. From any kk-Square configuration, there are 2k2k possible moves to transform the configuration into a new configuration.\nEach move changes the position and orientation of exactly one row or column of cubies from a\ninput configuration in the following way: to move row (or column) ii of a configuration, reverse\nthe order of the cubies within that row (or column), and flip the orientation of each cubie in the\nrow (or column) upside-down.\nWe will represent a kk-Square configuration via a length-kk array of length-kk arrays, where\nthe ythyth inner array corresponds to the ythyth row of the configuration, and the xthxth element of row yy corresponds to the cubie positioned at row yy and column xx. We represent each cubie as an integer between 11 and k2k2 inclusive, where integer ii represents the cubie that exists in row y=floor(i\xe2\x88\x921/k)y=floor(i\xe2\x88\x921/k) and column x=i\xe2\x88\x92ky\xe2\x88\x921x=i\xe2\x88\x92ky\xe2\x88\x921 in the solved configuration. In addition, we use positive ii when the cubie in the configuration has the same orientation as in the solved configuration, and negative ii when the cubie is upside-down. For example, the two configurations shown above have the following representations:\n\nC1=((1,2,3,4),(5,6,7,8),(9,10,11,12),(13,14,15,16))C1=((1,2,3,4),(5,6,7,8),(9,10,11,12),(13,14,15,16))\nC2=((1,2,\xe2\x88\x9215,4),(5,6,\xe2\x88\x9211,8),(9,10,\xe2\x88\x927,12),(13,14,\xe2\x88\x923,16))C2=((1,2,\xe2\x88\x9215,4),(5,6,\xe2\x88\x9211,8),(9,10,\xe2\x88\x927,12),(13,14,\xe2\x88\x923,16))\nhere, C2C2 = move(C1C1, ("colcol", 22))\n\nJoseph Cooper now needs your help!\nFind the shortest sequence of moves to solve the kk-Square. The input will be a kk-square configuration, and it should return a list of moves where: (1)(1) each move is of the form (s,i)(s,i) for some ss in { "rowrow","colcol"} and ii in 0,.....,k\xe2\x88\x9210,.....,k\xe2\x88\x921, and (2)(2) applying the sequence of moves in order to the input configuration results in the solved configuration. If there are multiple sequences of moves always choose to apply a \xe2\x80\x9ccolcol\xe2\x80\x9d move before a \xe2\x80\x9crowrow\xe2\x80\x9d move, and between moves of the same type (\xe2\x80\x9crowrow\xe2\x80\x9d or \xe2\x80\x9ccolcol\xe2\x80\x9d) choose the move with a smaller index.\nInput format\n\nThe first line contains kk, the side of the kk-square.\nThe following kk lines contains kk integers, such that the ithith integer in the jthjth line aijaij  corresponds to the cubie positioned at row ii and column jj.\n\nConstraints\n\n1\xe2\x89\xa4k\xe2\x89\xa4101\xe2\x89\xa4k\xe2\x89\xa410\n\xe2\x88\x92k2\xe2\x89\xa4aij\xe2\x89\xa4k2\xe2\x88\x92k2\xe2\x89\xa4aij\xe2\x89\xa4k2\n\nOutput Format\n\nPrint nn, the number of moves in the shortest sequence.\nIn the following nn lines print the moves, where the ithith line contains a move of the form (s,i)(s,i) as a string ss followed by a space followed by integer ii.\n\nSample Input\n2\n1 -4\n3 -2\n\nSample Output\n1\ncol 1 \n\n\n\n\nAuthor:\n5\xe2\x98\x85shriram_c253\n\n\nEditorial:\nhttps://discuss.codechef.com/problems/SOPC013\n\n\nTags:\n\n               \n                 breadth-first-search, graphs, implementation, math, sapc2019, shriram_c253\n                 \n               \n             \n             \n\n\n\n                        Difficulty Rating:\n                    \n\nN/A\n\n\nDate Added:\n19-12-2019\n\n\nTime Limit:\n1 secs\n\n\nSource Limit:\n50000 Bytes\n\n\nLanguages:\nPYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM\n\n\n\n\n\nSubmit\n\n'